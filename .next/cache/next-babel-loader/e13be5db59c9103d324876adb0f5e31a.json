{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_COUNT } from '../constants';\nconst counterInit = {\n  total: 0\n};\n\nconst counterReducer = (state = counterInit, action) => {\n  switch (action.type) {\n    case ADD_COUNT:\n      {\n        return _objectSpread({}, state, {\n          total: ++state.total\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default counterReducer;","map":{"version":3,"sources":["/Users/komphet/dev/redux-workshop/src/redux/reducers/counterReducer.js"],"names":["ADD_COUNT","counterInit","total","counterReducer","state","action","type"],"mappings":";;;;;;AAAA,SAAQA,SAAR,QAAwB,cAAxB;AAEA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,KAAK,EAAE;AADS,CAApB;;AAIA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGH,WAAT,EAAsBI,MAAtB,KAAiC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,SAAL;AAAgB;AACZ,iCACOI,KADP;AAEIF,UAAAA,KAAK,EAAE,EAAEE,KAAK,CAACF;AAFnB;AAIH;;AAED;AAAS,aAAOE,KAAP;AARb;AAWH,CAZD;;AAcA,eAAeD,cAAf","sourcesContent":["import {ADD_COUNT} from '../constants';\n\nconst counterInit = {\n    total: 0\n}\n\nconst counterReducer = (state = counterInit, action) => {\n    switch (action.type) {\n        case ADD_COUNT: {\n            return {\n                ...state,\n                total: ++state.total\n            }\n        }\n        \n        default: return state\n        \n    }\n}\n\nexport default counterReducer;"]},"metadata":{},"sourceType":"module"}